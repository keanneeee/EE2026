module collision_detection_test(
    input basys_clock,
    input [7:0] x_centre_P1, y_centre_P1, 
    input [7:0] x_centre_P2, y_centre_P2,
    input [7:0] ball_x, ball_y,
    input [4:0] initial_d_P1, initial_d_P2, initial_d_ball,
    input [4:0] initial_p_P1, initial_p_P2, initial_p_ball,
    input [7:0] P1_radius, P2_radius, ball_radius,
    input after_collision_P1, after_collision_P2, after_collision_ball,
    output reg [4:0] resultant_d_P1, resultant_d_P2, resultant_d_ball,
    output reg [4:0] resultant_p_P1, resultant_p_P2, resultant_p_ball,
    output reg collision_detected_P1P2, collision_detected_P1ball, collision_detected_P2ball
);

    // Temporary registers for squared distances and combined radii squared
    reg [15:0] distance_squared_P1_P2, distance_squared_P1_ball, distance_squared_P2_ball;
    reg [15:0] combined_radii_squared_P1_P2, combined_radii_squared_P1_ball, combined_radii_squared_P2_ball;
    
    // Function to compute 180 degrees rotation
    function [4:0] get_180_degree_rotation;
        input [4:0] direction;
        get_180_degree_rotation = (direction + 8) % 16;
    endfunction
    
    // POC calculation
    function [4:0] get_POC;
        input signed [8:0] dx, dy;
        begin
            if (dx == 0) get_POC = (dy > 0) ? 4 : 12;
            else if (dy == 0) get_POC = (dx > 0) ? 0 : 8;
            else if (dx > 0 && dy > 0) get_POC = 2;
            else if (dx < 0 && dy > 0) get_POC = 6;
            else if (dx < 0 && dy < 0) get_POC = 10;
            else get_POC = 14;
        end
    endfunction
    
    // Distance calculations and collision checks
    always @(posedge basys_clock) begin
        // Reset collision flags and resultant outputs
        collision_detected_P1P2 <= 0;
        collision_detected_P1ball <= 0;
        collision_detected_P2ball <= 0;
    
        resultant_d_P1 <= initial_d_P1;
        resultant_d_P2 <= initial_d_P2;
        resultant_d_ball <= initial_d_ball;
        
        resultant_p_P1 <= initial_p_P1;
        resultant_p_P2 <= initial_p_P2;
        resultant_p_ball <= initial_p_ball;
    
        // Calculate squared distances
        distance_squared_P1_P2 <= (x_centre_P1 - x_centre_P2) * (x_centre_P1 - x_centre_P2) + (y_centre_P1 - y_centre_P2) * (y_centre_P1 - y_centre_P2);
        distance_squared_P1_ball <= (x_centre_P1 - ball_x) * (x_centre_P1 - ball_x) + (y_centre_P1 - ball_y) * (y_centre_P1 - ball_y);
        distance_squared_P2_ball <= (x_centre_P2 - ball_x) * (x_centre_P2 - ball_x) + (y_centre_P2 - ball_y) * (y_centre_P2 - ball_y);
    
        // Calculate combined radii squared
        combined_radii_squared_P1_P2 <= (P1_radius + P2_radius) * (P1_radius + P2_radius);
        combined_radii_squared_P1_ball <= (P1_radius + ball_radius) * (P1_radius + ball_radius);
        combined_radii_squared_P2_ball <= (P2_radius + ball_radius) * (P2_radius + ball_radius);
    
        // Handle each collision scenario
        // --- P1 and P2 ---
        if (distance_squared_P1_P2 <= combined_radii_squared_P1_P2) begin
            collision_detected_P1P2 <= 1;
            if (initial_p_P1 != 0 && initial_p_P2 != 0) begin // Both P1 and P2 moving
                resultant_d_P1 <= initial_d_P2;
                resultant_d_P2 <= initial_d_P1;
                resultant_p_P1 <= initial_p_P2;
                resultant_p_P2 <= initial_p_P1;
            end else if (initial_p_P1 != 0 && initial_p_P2 == 0) begin // P1 moving, P2 stationary
                resultant_d_P2 <= get_180_degree_rotation(get_POC(x_centre_P2 - x_centre_P1, y_centre_P2 - y_centre_P1));
                resultant_p_P2 <= initial_p_P1;
                resultant_p_P1 <= 0;
            end else if (initial_p_P2 != 0 && initial_p_P1 == 0) begin // P2 moving, P1 stationary
                resultant_d_P1 <= get_180_degree_rotation(get_POC(x_centre_P1 - x_centre_P2, y_centre_P1 - y_centre_P2));
                resultant_p_P1 <= initial_p_P2;
                resultant_p_P2 <= 0;
            end
        end
    
        // --- P1 and Ball ---
        if (distance_squared_P1_ball <= combined_radii_squared_P1_ball) begin
            collision_detected_P1ball <= 1;
            if (initial_p_P1 != 0 && initial_p_ball != 0) begin // Both P1 and Ball moving
                resultant_d_P1 <= initial_d_ball;
                resultant_d_ball <= initial_d_P1;
                resultant_p_P1 <= initial_p_ball;
                resultant_p_ball <= initial_p_P1;
            end else if (initial_p_P1 != 0 && initial_p_ball == 0) begin // P1 moving, Ball stationary
                resultant_d_ball <= get_180_degree_rotation(get_POC(ball_x - x_centre_P1, ball_y - y_centre_P1));
                resultant_p_ball <= initial_p_P1;
                resultant_p_P1 <= 0;
            end else if (initial_p_ball != 0 && initial_p_P1 == 0) begin // Ball moving, P1 stationary
                resultant_d_P1 <= get_180_degree_rotation(get_POC(x_centre_P1 - ball_x, y_centre_P1 - ball_y));
                resultant_p_P1 <= initial_p_ball;
                resultant_p_ball <= 0;
            end
        end
    
        // --- P2 and Ball ---
        if (distance_squared_P2_ball <= combined_radii_squared_P2_ball) begin
            collision_detected_P2ball <= 1;
            if (initial_p_P2 != 0 && initial_p_ball != 0) begin // Both P2 and Ball moving
                resultant_d_P2 <= initial_d_ball;
                resultant_d_ball <= initial_d_P2;
                resultant_p_P2 <= initial_p_ball;
                resultant_p_ball <= initial_p_P2;
            end else if (initial_p_P2 != 0 && initial_p_ball == 0) begin // P2 moving, Ball stationary
                resultant_d_ball <= get_180_degree_rotation(get_POC(ball_x - x_centre_P2, ball_y - y_centre_P2));
                resultant_p_ball <= initial_p_P2;
                resultant_p_P2 <= 0;
            end else if (initial_p_ball != 0 && initial_p_P2 == 0) begin // Ball moving, P2 stationary
                resultant_d_P2 <= get_180_degree_rotation(get_POC(x_centre_P2 - ball_x, y_centre_P2 - ball_y));
                resultant_p_P2 <= initial_p_ball;
                resultant_p_ball <= 0;
            end
        end
        
        if (after_collision_P1) begin
            collision_detected_P1P2 <= 0;
            collision_detected_P1ball <= 0;
        end
        if (after_collision_P2) begin
            collision_detected_P1P2 <= 0;
            collision_detected_P2ball <= 0;
        end
        if (after_collision_ball) begin
            collision_detected_P1ball <= 0;
            collision_detected_P2ball <= 0;
        end
    end

endmodule
