`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02.11.2024 11:16:11
// Design Name: 
// Module Name: colision_detection_v2
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module colision_detection_v2(
     input basys_clock, 
     input [7:0] x1, y1, x2, y2, bx, by, //p1 p2 and ball coordinates 
     input [4:0] IP1, IP2, IP3,
     input [4:0] ID1, ID2, IDB, 
     output reg [4:0] RD1, RD2, RDB, 
     output reg [4:0] collision_detected //0(no collision detected), 1(IP1 == 0, IP2 != 0), 2(IP1 != 0, IP2 == 0), 3(IP1 != 0, IP2 != 0)
    );
wire signed [7:0] dx, dy, c1, c2;
wire signed [7:0] dx2, dy2;
reg [5:0] POC1, POC2; 
reg [5:0] angle, angle2;
reg collision = 0;

localparam integer RADIUS_SQUARED = 144;
wire[13:0] c1_squared, c2_squared;
wire[13:0] distance_squared;

assign c1 = (x1 > x2)?(x1 - x2):(x2 - x1);
assign c2 = (y1 > y2) ? (y1 - y2): ( y2 - y1);

assign c1_squared = c1 *c1;
assign c2_squared = c2 *c2;

assign distance_squared = c1_squared + c2_squared;

assign dx = x2 - x1;
assign dx = y2 - y1;
assign dx2 = x1 - x2;
assign dy2 = y1 - y2;

always @(posedge basys_clock) begin
if (distance_squared <= RADIUS_SQUARED) begin
    collision <= 1;//detect player on player collision
    end
    if (collision_detected != 0)
    collision <= 0;
  end
  
always @(posedge basys_clock) begin
  if(dx == 0) begin
    angle <= (dy > 0) ? 4 : 12;//north or south
    end
    else if (dy == 0) begin
      angle <= (dx > 0) ? 0 : 8;
    end
    else begin
      if (dx > 0 && dy > 0) begin angle <= 2; end
      else if (dx < 0 && dy > 0) begin angle <= 6; end
      else if (dx < 0 && dy < 0) begin angle <= 10; end
      else if (dx > 0 && dy < 0) begin angle <= 14; end
    end
    POC1 <= angle;
  if(dx2 == 0) begin
        angle2 <= (dy2 > 0) ? 4 : 12;//north or south
      end
      else if (dy2 == 0) begin
        angle2 <= (dx2 > 0) ? 0 : 8;
      end
      else begin
          if (dx2 > 0 && dy2 > 0) begin angle2 <= 2; end
          else if (dx2 < 0 && dy2 > 0) begin angle2 <= 6; end
          else if (dx2 < 0 && dy2 < 0) begin angle2 <= 10; end
          else if (dx2 > 0 && dy2 < 0) begin angle2 <= 14; end
        end
        POC2 <= angle2;
  end
always @(posedge basys_clock) begin
if (collision) begin
  if (IP1 == 0 && IP2 != 0) begin
    collision_detected <= 1;
    
    RD1 <= (POC1 + 8) % 16;
  if (IP1 != 0 && IP2 == 0) begin
    collision_detected <= 2;
    RD2 <= (POC2 +8) % 16;
      end
  if( IP1 != 0 && IP2 != 0) begin
      collision_detected <= 3;
      RD2 <= ID1;
      RD1 <= ID2;
      end
    end  
  end
end
endmodule
