module soccer_field(input basys_clock, input reset, input [12:0] pixel_index,
    output reg [15:0] oled_data);

    //coordinates
    wire [6:0] x;
    wire [5:0] y;
    assign x = pixel_index % 96;
    assign y = pixel_index / 96;
    
    //circle formula
    wire [12:0] circle_formula;
    assign circle_formula = (x - 48)*(x - 48) + (y - 27)*(y - 27); // Circle formula
    
    always @ (posedge basys_clock)begin
        if (reset) oled_data <= 16'b00000_000000_00000;
        else begin 

            //field border lines
            if ((x == 0 || x == 95) && (y >= 0 && y <= 63) || 
                (y == 0 || y == 53) && (x >= 0 && x <= 95))
                    oled_data <= 16'b11111_111111_11111; 
            else if ((y == 63) && (x >= 0 && x <= 95))
                oled_data <= 16'b11111_111111_11111; 

            //goal post line small
            else if (((x == 0 || x == 5) && (y >= 17 && y <= 36)) || // Vertical goal posts (left)
                         ((y == 17 || y == 36) && (x >= 0 && x <= 5)) || // Horizontal goal posts (left)
                         ((x == 90 || x == 95) && (y >= 17 && y <= 36)) || // Vertical goal posts (right)
                         ((y == 17 || y == 36) && (x >= 90 && x <= 95)))   // Horizontal goal posts (right)
                    oled_data <= 16'b11111_111111_11111; 
                    
            //goal post line big
            else if (((x == 0 || x == 15) && (y >= 7 && y <= 46)) || // Vertical goal posts (left)
                        ((y == 7 || y == 46) && (x >= 0 && x <= 15)) || // Horizontal goal posts (left)
                        ((x == 80 || x == 95) && (y >= 7 && y <= 46)) || // Vertical goal posts (right)
                        ((y == 7 || y == 46) && (x >= 80 && x <= 95)))   // Horizontal goal posts (right)
                    oled_data <= 16'b11111_111111_11111; 
            
            //center line
            else if (x == 48 && y >= 0 && y <= 63)
                oled_data <= 16'b11111_111111_11111;
                
            //center circle
            else if (circle_formula <= 169 && circle_formula >= 144)
                oled_data <= 16'b11111_111111_11111;
            
            //score counter
            else if ((x >= 36 && x <= 47) && (y >= 53 && y <= 64)) //left red
                oled_data <= 16'b11111_000000_00000;
            else if ((x >= 49 && x <= 59) && (y >= 53 && y <= 64)) //right blue
                oled_data <= 16'b00000_000000_11111;
            
            //left power bar colour: red            
            else if ((x >= 0 && x <= 35) && (y >= 53 && y <= 64)) begin
                oled_data <= 16'b11111_011111_00111;
            //left power bar at bottom dividers
                if (((x == 5) && (y >= 53 && y <= 64)) ||
                        ((x == 10) && (y >= 53 && y <= 64)) ||
                        ((x == 15) && (y >= 53 && y <= 64)) ||
                        ((x == 20) && (y >= 53 && y <= 64)) ||
                        ((x == 25) && (y >= 53 && y <= 64)) ||
                        ((x == 30) && (y >= 53 && y <= 64)) ||
                        ((x == 35) && (y >= 53 && y <= 64))) begin
                        oled_data <= 16'b11111_111111_11111;
                end
            end
            
            //right power bar colour: blue            
            else if ((x >= 60 && x <= 95) && (y >= 53 && y <= 64)) begin
                oled_data <= 16'b00000_101111_11111;
            //right power bar at bottom dividers
                if (((x == 60) && (y >= 53 && y <= 64)) ||
                        ((x == 65) && (y >= 53 && y <= 64)) ||
                        ((x == 70) && (y >= 53 && y <= 64)) ||
                        ((x == 75) && (y >= 53 && y <= 64)) ||
                        ((x == 80) && (y >= 53 && y <= 64)) ||
                        ((x == 85) && (y >= 53 && y <= 64)) ||
                        ((x == 90) && (y >= 53 && y <= 64))) begin
                        oled_data <= 16'b11111_111111_11111;
                end
            end
            
            else
                oled_data <= 16'b00000_111111_00000; // Green color in RGB565
        
        end
    end //always @ end
    
endmodule
