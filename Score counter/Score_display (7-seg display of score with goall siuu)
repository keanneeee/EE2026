module score_display(input basys_clock, input reset, input [3:0] sw, input btnC,
    output reg p1_win = 0, output reg p2_win = 0, output reg showdown = 0, output reg [7:0] seg, output reg [3:0] an);
    
    //player 1&2 sw inputs testing
    //player 1 score: 0100,1000,1100
    //player 2 score: 0001,0010,0011
    
    reg [3:0] current_digit;
    reg [1:0] anode_selector = 0;
    reg [31:0] refresh_counter = 0;
    reg goal;
    reg [31:0] goal_counter = 0;
    reg [3:0] goal_moving;

    //digits -----------------------------------------------------------------------------------------------------------------------------
    always @(*) begin
        case (current_digit)
            4'd0: seg = 8'b11000000; //0
            4'd1: seg = 8'b11111001; //1
            4'd2: seg = 8'b10100100; //2
            4'd3: seg = 8'b10110000; //3
            4'd4 : seg = 8'b11000010; //G
            4'd5 : seg = 8'b11000000; //O
            4'd6 : seg = 8'b10001000; //A
            4'd7 : seg = 8'b11000111; //L
            4'd8 : seg = 8'b10010010; //S
            4'd9 : seg = 8'b11001111;//I
            4'd10 : seg = 8'b11000001;//U
            4'd11 : seg = 8'b11110111; //_
            default: seg = 8'b11111111;
        endcase
    end

    //refresh rate -----------------------------------------------------------------------------------------------------------------------
    always @(posedge basys_clock or posedge reset)begin
        if (reset) begin
            refresh_counter <= 0;
            anode_selector <= 0;
        end 
        else begin
            refresh_counter <= refresh_counter + 1;
            if (refresh_counter == 31'd99999)begin
                refresh_counter <= 0;
                anode_selector <= anode_selector + 1;
            end
        end
    end

    always @(posedge basys_clock or posedge reset) begin
        if (reset) begin
            goal_counter <= 0;
            goal_moving <= 0;
            goal <= 0;
        end else if (btnC == 1) begin
            goal <= 1;
            goal_counter <= 0;
            goal_moving <= 0;
        end else if (goal) begin
            goal_counter <= goal_counter + 1;
    
            if (goal_counter >= 32'd50000000) begin
                goal_counter <= 0;
                goal_moving <= goal_moving + 1;
    
                if (goal_moving >= 4'd15) begin
                    goal <= 0;
                    goal_moving <= 0;
                end
            end
        end
    end

    //an selector display --------------------------------------------------------------------------------------------------------------
    always @(*)begin
    if (goal == 1 && goal_moving == 4'd0)begin //GOAL
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd11;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd11;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd11;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd11;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end else if (goal_moving == 4'd1)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd4;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd11;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd11;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd11;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd2)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd5;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd4;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd11;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd11;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd3)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd6;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd5;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd4;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd11;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd4)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd7;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd6;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd5;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd4;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd5)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd7;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd7;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd6;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd5;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd6)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd7;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd7;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd7;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd6;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd7)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd7;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd7;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd7;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd7;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd8)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd7;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd7;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd7;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd7;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd9)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd8;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd7;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd7;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd7;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd10)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd9;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd8;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd7;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd7;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd11)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd10;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd9;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd8;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd7;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd12)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd10;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd10;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd9;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd8;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd13)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd10;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd10;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd10;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd9;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd14)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd10;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd10;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd10;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd10;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else if (goal_moving == 4'd15)begin
        case (anode_selector)
        2'd0: begin
            an = 4'b1110; //an0
            current_digit = 4'd10;
        end
        2'd1: begin
            an = 4'b1101; //an1
            current_digit = 4'd10;
        end
        2'd2: begin
            an = 4'b1011; //an2
            current_digit = 4'd10;
        end
        2'd3: begin
            an = 4'b0111; //an3
            current_digit = 4'd10;
        end
        default: begin
            an = 4'b1111;
            current_digit = 4'd0;
        end
    endcase
    end else begin
    //SCORES: 0-1, 0-2, 0-3, 1-0, 2-0, 3-0 ---------------------------------------------------------------------------------
    if (reset == 0 || sw == 4'b0000 || goal == 0)begin //p1: 0, p2: 0, 0-0
        p1_win <= 0;
        p2_win <= 0;
        showdown <= 0;
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd0;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd0;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0100)begin //p1: 1, p2: 0, 1-0
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd0;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd1;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1000)begin //p1: 2, p2: 0, 2-0
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd0;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd2;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1100)begin //p1: 3, p2: 0, 3-0
        p1_win <= 1; //send out p1 wins
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd0;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd3;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0001)begin //p1: 0, p2: 1, 0-1
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd1;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd0;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0010)begin //p1: 0, p2: 2, 0-2
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd2;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd0;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0011)begin //p1: 0, p2: 3, 0-3
        p2_win <= 1; //send out p2 wins
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd3;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd0;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    //SCORES: 1-1, 2-2 -------------------------------------------------------------------------------------------------------------
    if (sw == 4'b0101)begin //p1: 1, p2: 1, 1-1
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd1;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd1;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1010)begin //p1: 2, p2: 2, 2-2
        showdown <= 1; //sends out showdown, 1 more point to win
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd2;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd2;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    //SCORES: 1-2, 1-3, 2-1, 3-1 -------------------------------------------------------------------------------------------------------------
    if (sw == 4'b0110)begin //p1: 1, p2: 2, 1-2
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd2;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd1;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0111)begin //p1: 1, p2: 3, 1-3
        p2_win <= 1; //sends out p2 wins
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd3;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd1;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1001)begin //p1: 2, p2: 1, 2-1
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd1;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd2;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1101)begin //p1: 3, p2: 1, 3-1
        p1_win <= 1; //sends out p1 wins
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd1;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd3;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    //SCORES: 2-1, 2-3, 1-2, 3-2 -------------------------------------------------------------------------------------------------------------
    
    if (sw == 4'b1001)begin //p1: 2, p2: 1, 2-1
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd1;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd2;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1011)begin //p1: 2, p2: 3, 2-3
        p2_win <= 1; //sends out p2 wins
        showdown <= 0; //reset showdown
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd3;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd2;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b0110)begin //p1: 1, p2: 2, 1-2
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd2;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd1;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    
    if (sw == 4'b1110)begin //p1: 3, p2: 2, 3-2
        p1_win <= 1; //sends out p1 wins
        showdown <= 0; //reset showdown
        case (anode_selector)
            2'd0: begin
                an = 4'b1110; //an0
                current_digit = 4'd2;
            end
            2'd1: begin
                an = 4'b1101; //an1
                current_digit = 4'd0;
            end
            2'd2: begin
                an = 4'b1011; //an2
                current_digit = 4'd3;
            end
            2'd3: begin
                an = 4'b0111; //an3
                current_digit = 4'd0;
            end
            default: begin
                an = 4'b1111;
                current_digit = 4'd0;
            end
        endcase
    end
    end
    end
endmodule
